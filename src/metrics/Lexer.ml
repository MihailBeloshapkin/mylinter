# 1 "Lexer.mll"
 
  let num_lines = ref 1
  let num_chars = ref 0
  let num_empty = ref 0
  let num_comm_lines = ref 0
  let num_llines = ref 0
  let commets_data : string list ref = ref []

# 11 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\250\255\251\255\252\255\002\000\002\000\255\255\254\255\
    \005\000\007\000\251\255\252\255\253\255\000\000\006\000\255\255\
    \254\255\018\000\251\255\252\255\254\255\255\255\009\000\253\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\002\000\004\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    ";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\011\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\019\000\000\000\000\000\000\000\000\000\255\255\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\008\000\007\000\000\000\008\000\007\000\
    \000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\021\000\020\000\000\000\000\000\000\000\
    \003\000\000\000\008\000\000\000\000\000\008\000\000\000\000\000\
    \005\000\016\000\008\000\008\000\006\000\008\000\008\000\014\000\
    \015\000\013\000\021\000\023\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\022\000\021\000\000\000\008\000\000\000\000\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\000\000\008\000\
    \008\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\004\000\255\255\008\000\008\000\
    \255\255\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\017\000\017\000\255\255\255\255\255\255\
    \000\000\255\255\004\000\255\255\255\255\008\000\255\255\255\255\
    \000\000\013\000\004\000\004\000\005\000\008\000\008\000\009\000\
    \014\000\009\000\017\000\022\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000\017\000\255\255\004\000\255\255\255\255\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\255\255\004\000\
    \008\000\255\255\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\255\255\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\004\000\004\000\004\000\
    \008\000\008\000\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\255\255\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\017\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec scan is_new_line lexbuf =
   __ocaml_lex_scan_rec is_new_line lexbuf 0
and __ocaml_lex_scan_rec is_new_line lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "Lexer.mll"
                 ( incr num_comm_lines; comments 0 "" is_new_line lexbuf )
# 121 "Lexer.ml"

  | 1 ->
# 14 "Lexer.mll"
                 ( num_lines := !num_lines + 2;
                   if not is_new_line then incr num_llines;
                   incr num_empty;
                   empty 0 lexbuf )
# 129 "Lexer.ml"

  | 2 ->
# 18 "Lexer.mll"
                 ( incr num_lines; 
                   if not is_new_line then incr num_llines;
                   scan true lexbuf )
# 136 "Lexer.ml"

  | 3 ->
# 21 "Lexer.mll"
                 ( incr num_chars; scan is_new_line lexbuf )
# 141 "Lexer.ml"

  | 4 ->
# 22 "Lexer.mll"
                 ( incr num_chars; scan false lexbuf )
# 146 "Lexer.ml"

  | 5 ->
# 23 "Lexer.mll"
                 ( () )
# 151 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_scan_rec is_new_line lexbuf __ocaml_lex_state

and comments level acc is_nline lexbuf =
   __ocaml_lex_comments_rec level acc is_nline lexbuf 9
and __ocaml_lex_comments_rec level acc is_nline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 25 "Lexer.mll"
                ( comments (level + 1) (String.concat "" [acc; "(*"]) is_nline lexbuf )
# 163 "Lexer.ml"

  | 1 ->
# 26 "Lexer.mll"
                ( if level = 0 then (commets_data := acc::(!commets_data); scan is_nline lexbuf)
                  else
                    comments (level - 1) (String.concat "" [acc; "*)"]) is_nline lexbuf )
# 170 "Lexer.ml"

  | 2 ->
# 29 "Lexer.mll"
                ( incr num_lines; incr num_comm_lines; comments level (String.concat "" [acc; "\n"]) true lexbuf )
# 175 "Lexer.ml"

  | 3 ->
let
# 30 "Lexer.mll"
         c
# 181 "Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 30 "Lexer.mll"
                ( comments level (String.concat "" [acc; String.make 1 c]) is_nline lexbuf )
# 185 "Lexer.ml"

  | 4 ->
# 31 "Lexer.mll"
                ( () )
# 190 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec level acc is_nline lexbuf __ocaml_lex_state

and empty acc lexbuf =
   __ocaml_lex_empty_rec acc lexbuf 17
and __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "Lexer.mll"
                                        ( empty acc lexbuf )
# 202 "Lexer.ml"

  | 1 ->
# 34 "Lexer.mll"
                                        ( incr num_lines; empty (acc + 1) lexbuf )
# 207 "Lexer.ml"

  | 2 ->
# 35 "Lexer.mll"
                                        ( incr num_comm_lines; (num_empty := !num_empty + acc); comments 0 "" true lexbuf )
# 212 "Lexer.ml"

  | 3 ->
# 36 "Lexer.mll"
                                        ( (num_empty := !num_empty + acc); scan false lexbuf )
# 217 "Lexer.ml"

  | 4 ->
# 37 "Lexer.mll"
                                        ( () )
# 222 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state

;;

# 39 "Lexer.mll"
 
  let process source =
    let lexbuf = Lexing.from_string source in
    scan true lexbuf;
    (!num_empty, !num_lines, !num_comm_lines, !commets_data, !num_llines)

# 236 "Lexer.ml"
