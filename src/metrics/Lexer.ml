# 1 "Lexer.mll"
 
  let num_lines = ref 1
  let num_chars = ref 0
  let num_empty = ref 0
  let num_comm_lines = ref 0
  let commets_data : string list ref = ref []

# 10 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\251\255\252\255\000\000\003\000\253\255\006\000\254\255\
    \008\000\251\255\252\255\253\255\000\000\003\000\255\255\254\255\
    \017\000\251\255\252\255\254\255\255\255\009\000\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\003\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \010\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\000\000\006\000\005\000\000\000\006\000\
    \005\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\020\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\000\000\000\000\006\000\000\000\
    \003\000\015\000\007\000\006\000\006\000\014\000\006\000\006\000\
    \013\000\020\000\012\000\022\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\020\000\000\000\000\000\000\000\006\000\000\000\
    \000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
    \006\000\006\000\000\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\004\000\004\000\255\255\006\000\
    \006\000\255\255\008\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\004\000\255\255\255\255\006\000\255\255\
    \000\000\012\000\003\000\004\000\004\000\013\000\006\000\006\000\
    \008\000\016\000\008\000\021\000\255\255\255\255\255\255\255\255\
    \255\255\016\000\016\000\255\255\255\255\255\255\004\000\255\255\
    \255\255\006\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\255\255\
    \004\000\006\000\255\255\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\016\000\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\004\000\
    \004\000\006\000\006\000\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\016\000\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\016\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec scan lexbuf =
   __ocaml_lex_scan_rec lexbuf 0
and __ocaml_lex_scan_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 12 "Lexer.mll"
                 ( incr num_lines; scan lexbuf )
# 117 "Lexer.ml"

  | 1 ->
# 13 "Lexer.mll"
                 ( print_string "Start comment"; incr num_comm_lines; comments 0 "" lexbuf )
# 122 "Lexer.ml"

  | 2 ->
# 14 "Lexer.mll"
                 ( num_lines := !num_lines + 2; incr num_empty; empty 0 lexbuf )
# 127 "Lexer.ml"

  | 3 ->
# 15 "Lexer.mll"
                 ( incr num_chars; scan lexbuf )
# 132 "Lexer.ml"

  | 4 ->
# 16 "Lexer.mll"
                 ( () )
# 137 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_scan_rec lexbuf __ocaml_lex_state

and comments level acc lexbuf =
   __ocaml_lex_comments_rec level acc lexbuf 8
and __ocaml_lex_comments_rec level acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 18 "Lexer.mll"
                ( comments (level + 1) (String.concat "" [acc; "(*"]) lexbuf )
# 149 "Lexer.ml"

  | 1 ->
# 19 "Lexer.mll"
                ( if level = 0 then (commets_data := acc::(!commets_data); scan lexbuf)
                  else
                    comments (level - 1) (String.concat "" [acc; "*)"]) lexbuf )
# 156 "Lexer.ml"

  | 2 ->
# 22 "Lexer.mll"
                ( incr num_lines; incr num_comm_lines; comments level (String.concat "" [acc; "\n"]) lexbuf )
# 161 "Lexer.ml"

  | 3 ->
let
# 23 "Lexer.mll"
         c
# 167 "Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 23 "Lexer.mll"
                ( comments level (String.concat "" [acc; String.make 1 c]) lexbuf )
# 171 "Lexer.ml"

  | 4 ->
# 24 "Lexer.mll"
                ( () )
# 176 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec level acc lexbuf __ocaml_lex_state

and empty acc lexbuf =
   __ocaml_lex_empty_rec acc lexbuf 16
and __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 26 "Lexer.mll"
                                        ( empty acc lexbuf )
# 188 "Lexer.ml"

  | 1 ->
# 27 "Lexer.mll"
                                        ( incr num_lines; empty (acc + 1) lexbuf )
# 193 "Lexer.ml"

  | 2 ->
# 28 "Lexer.mll"
                                        ( print_string "Start comment"; incr num_comm_lines; (num_empty := !num_empty + acc); comments 0 "" lexbuf )
# 198 "Lexer.ml"

  | 3 ->
# 29 "Lexer.mll"
                                        ( (num_empty := !num_empty + acc); scan lexbuf )
# 203 "Lexer.ml"

  | 4 ->
# 30 "Lexer.mll"
                                        ( () )
# 208 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_empty_rec acc lexbuf __ocaml_lex_state

;;

# 32 "Lexer.mll"
 
  let process source =
    let lexbuf = Lexing.from_string source in
    scan lexbuf;
    (!num_empty, !num_lines, !num_comm_lines, !commets_data)

# 222 "Lexer.ml"
